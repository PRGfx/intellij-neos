{
    classHeader='copyrightHeader.java'

    generateTokenAccessors=true
    parserClass="de.vette.idea.neos.lang.fusion.parser.FusionParser"
    parserUtilClass="de.vette.idea.neos.lang.fusion.parser.FusionParserUtil"

    implements='de.vette.idea.neos.lang.fusion.psi.FusionElement'
    extends="de.vette.idea.neos.lang.fusion.psi.impl.FusionElementImpl"

    psiClassPrefix="Fusion"
    psiImplClassSuffix="Impl"
    psiPackage="de.vette.idea.neos.lang.fusion.psi"
    psiImplPackage="de.vette.idea.neos.lang.fusion.psi.impl"

    elementTypeHolderClass="de.vette.idea.neos.lang.fusion.psi.FusionTypes"
    elementTypeClass="de.vette.idea.neos.lang.fusion.psi.FusionElementType"
    tokenTypeClass="de.vette.idea.neos.lang.fusion.psi.FusionTokenType"
    tokenTypeFactory="de.vette.idea.neos.lang.fusion.psi.TokenTypeFactory.getTokenType"
}

FusionFile ::= item_*
private item_ ::= (namespace_declaration | include_declaration | property | SINGLE_LINE_COMMENT | C_STYLE_COMMENT | DOC_COMMENT) {
    recoverWhile="item_recovery"
}

private item_recovery ::= !(PROTOTYPE_KEYWORD|PATH_PART|EOF|VALUE_STRING_QUOTE|RIGHT_BRACE|LEFT_BRACE|INCLUDE_KEYWORD|NAMESPACE_KEYWORD|META_PROPERTY_KEYWORD|SINGLE_LINE_COMMENT|C_STYLE_COMMENT|DOC_COMMENT)

inner block ::= LEFT_BRACE [item_ *] RIGHT_BRACE {pin=1}

namespace_declaration ::= NAMESPACE_KEYWORD NAMESPACE_SEPARATOR alias NAMESPACE_ALIAS_SEPARATOR namespace {
    pin=1
    implements = "de.vette.idea.neos.lang.fusion.psi.FusionNamedElement"
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionNamespaceDeclarationImplMixin"
    stubClass = "de.vette.idea.neos.lang.fusion.stubs.FusionNamespaceDeclarationStub"
    elementTypeFactory = "de.vette.idea.neos.lang.fusion.stubs.StubElementTypeFactory.factory"
}

alias ::= NAMESPACE_ALIAS
namespace ::= PACKAGE_KEY

include_declaration ::= INCLUDE_KEYWORD INCLUDE_SEPARATOR (resource|INCLUDE_PATH) {pin=1}
resource ::= RESOURCE_KEYWORD RESOURCE_PATH {pin=1}

private property ::= path (property_block|property_deletion|property_copy|property_assignment)
left property_block ::= block
left property_deletion ::= UNSET_OPERATOR
left property_assignment ::= ASSIGNMENT_OPERATOR assignmentValue {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionNamedElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionPropertyAssignment" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPropertyAssignmentImplMixin"
    stubClass = "de.vette.idea.neos.lang.fusion.stubs.FusionPropertyAssignmentStub"
    elementTypeFactory = "de.vette.idea.neos.lang.fusion.stubs.StubElementTypeFactory.factory"
}

assignmentValue ::= (VALUE_BOOLEAN|VALUE_NULL|VALUE_NUMBER|value_dsl|value_string_line|expression|prototype_instance)

left property_copy ::= COPY_OPERATOR (VALUE_BOOLEAN|VALUE_NULL|VALUE_NUMBER|value_string_line|prototype_instance|(copied_prototype_signature [block])) {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionPropertyCopyMixin"]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPropertyCopyImplMixin"
}

type ::= [OBJECT_TYPE_NAMESPACE OBJECT_TYPE_SEPARATOR] UNQUALIFIED_TYPE {
    pin=2
    implements = ["de.vette.idea.neos.lang.fusion.psi.FusionReferenceElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionTypeMixin"]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionTypeImplMixin"
}

prototype_instance ::= type [block] {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionElement" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPrototypeInstanceImplMixin"
}

path ::= [PATH_SEPARATOR] (single_path|meta_property|prototype_signature|value_string_single_line) (PATH_SEPARATOR (single_path|prototype_signature|meta_property))* {
    pin=2
    implements = ["de.vette.idea.neos.lang.fusion.psi.FusionElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionPathMixin"]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPathImplMixin"
}

single_path ::= PATH_PART

meta_property ::= META_PROPERTY_KEYWORD META_PROPERTY_NAME {pin=1}

prototype_signature ::= PROTOTYPE_KEYWORD LEFT_PAREN type RIGHT_PAREN {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionNamedElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionPrototypeSignature" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPrototypeSignatureImplMixin"
    stubClass = "de.vette.idea.neos.lang.fusion.stubs.FusionPrototypeSignatureStub"
    elementTypeFactory = "de.vette.idea.neos.lang.fusion.stubs.StubElementTypeFactory.factory"
}

copied_prototype_signature ::= PROTOTYPE_KEYWORD LEFT_PAREN type RIGHT_PAREN {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionCopiedPrototypeSignature" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionCopiedPrototypeSignatureImplMixin"
}

value_dsl ::= DSL_IDENTIFIER BACKTICK value_dsl_content BACKTICK {
    pin=1
}

value_dsl_content ::= DSL_VALUE* {
    implements = [ "com.intellij.psi.PsiLanguageInjectionHost" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionValueDslContentImplMixin"
}

value_string_line ::= VALUE_STRING_QUOTE value_string_line_content VALUE_STRING_QUOTE {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionReferenceElement" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionValueStringLineImplMixin"
}

value_string_line_content ::= (VALUE_STRING | CRLF | VALUE_STRING_ESCAPED_QUOTE)*

value_string_single_line ::= VALUE_STRING_QUOTE (VALUE_STRING | VALUE_STRING_ESCAPED_QUOTE)* VALUE_STRING_QUOTE {pin=1}
expression ::= EXPRESSION_KEYWORD EEL_START_DELIMITER EEL_VALUE* EEL_END_DELIMITER {pin=1}
