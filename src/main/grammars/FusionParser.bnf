{
    classHeader='copyrightHeader.java'

    generateTokenAccessors=true
    parserClass="de.vette.idea.neos.lang.fusion.parser.FusionParser"
    parserUtilClass="de.vette.idea.neos.lang.fusion.parser.FusionParserUtil"

    implements='de.vette.idea.neos.lang.fusion.psi.FusionElement'
    extends="de.vette.idea.neos.lang.fusion.psi.impl.FusionElementImpl"

    psiClassPrefix="Fusion"
    psiImplClassSuffix="Impl"
    psiPackage="de.vette.idea.neos.lang.fusion.psi"
    psiImplPackage="de.vette.idea.neos.lang.fusion.psi.impl"

    elementTypeHolderClass="de.vette.idea.neos.lang.fusion.psi.FusionTypes"
    elementTypeClass="de.vette.idea.neos.lang.fusion.psi.FusionElementType"
    tokenTypeClass="de.vette.idea.neos.lang.fusion.psi.FusionTokenType"
}

FusionFile ::= item_*
private item_ ::= (namespace_declaration | include_declaration | property | SINGLE_LINE_COMMENT | C_STYLE_COMMENT | DOC_COMMENT) {
    recoverWhile="item_recovery"
}

private item_recovery ::= !(PROTOTYPE_KEYWORD|PATH_PART|EOF|VALUE_STRING_QUOTE|RIGHT_BRACE|LEFT_BRACE|INCLUDE_KEYWORD|NAMESPACE_KEYWORD|META_PROPERTY_KEYWORD|SINGLE_LINE_COMMENT|C_STYLE_COMMENT|DOC_COMMENT)

inner block ::= LEFT_BRACE [item_ *] RIGHT_BRACE {pin=1}

namespace_declaration ::= NAMESPACE_KEYWORD NAMESPACE_SEPARATOR alias NAMESPACE_ALIAS_SEPARATOR namespace {
    pin=1
    implements = "de.vette.idea.neos.lang.fusion.psi.FusionNamedElement"
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionNamespaceDeclarationImplMixin"
    stubClass = "de.vette.idea.neos.lang.fusion.stubs.FusionNamespaceDeclarationStub"
    elementTypeFactory = "de.vette.idea.neos.lang.fusion.stubs.StubElementTypeFactory.factory"
}

alias ::= NAMESPACE_ALIAS
namespace ::= PACKAGE_KEY

include_declaration ::= INCLUDE_KEYWORD INCLUDE_SEPARATOR (resource|INCLUDE_PATH) {pin=1}
resource ::= RESOURCE_KEYWORD RESOURCE_PATH {pin=1}

private property ::= path (property_block|property_deletion|property_copy|property_assignment)
left property_block ::= block
left property_deletion ::= UNSET_OPERATOR
left property_assignment ::= ASSIGNMENT_OPERATOR (VALUE_BOOLEAN|VALUE_NULL|VALUE_NUMBER|value_dsl|value_string_line|expression|prototype_instance) {pin=1}
left property_copy ::= COPY_OPERATOR (VALUE_BOOLEAN|VALUE_NULL|VALUE_NUMBER|value_string_line|prototype_instance|(copied_prototype_signature [block])) {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionPropertyCopyMixin"]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPropertyCopyImplMixin"
}

type ::= [OBJECT_TYPE_NAMESPACE OBJECT_TYPE_SEPARATOR] UNQUALIFIED_TYPE {
    pin=2
    implements = ["de.vette.idea.neos.lang.fusion.psi.FusionReferenceElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionTypeMixin"]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionTypeImplMixin"
}

prototype_instance ::= type [block] {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionElement" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPrototypeInstanceImplMixin"
}

path ::= [PATH_SEPARATOR] (PATH_PART|meta_property|prototype_signature|value_string_single_line) (PATH_SEPARATOR (PATH_PART|prototype_signature|meta_property))* {
    pin=2
    implements = ["de.vette.idea.neos.lang.fusion.psi.FusionElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionPathMixin"]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPathImplMixin"
}

meta_property ::= META_PROPERTY_KEYWORD META_PROPERTY_NAME {pin=1}

prototype_signature ::= PROTOTYPE_KEYWORD LEFT_PAREN type RIGHT_PAREN {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionNamedElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionPrototypeSignature" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionPrototypeSignatureImplMixin"
    stubClass = "de.vette.idea.neos.lang.fusion.stubs.FusionPrototypeSignatureStub"
    elementTypeFactory = "de.vette.idea.neos.lang.fusion.stubs.StubElementTypeFactory.factory"
}

copied_prototype_signature ::= PROTOTYPE_KEYWORD LEFT_PAREN type RIGHT_PAREN {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionElement"; "de.vette.idea.neos.lang.fusion.psi.ext.FusionCopiedPrototypeSignature" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionCopiedPrototypeSignatureImplMixin"
}

value_dsl ::= DSL_IDENTIFIER BACKTICK value_dsl_content BACKTICK {
    pin=1
}

value_dsl_content ::= (VALUE_STRING | CRLF | ESCAPED_BACKTICK)* {
    implements = [ "com.intellij.psi.PsiLanguageInjectionHost" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionValueDslContentImplMixin"
}

value_string_line ::= VALUE_STRING_QUOTE value_string_line_content VALUE_STRING_QUOTE {
    pin=1
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionReferenceElement" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionValueStringLineImplMixin"
}

value_string_line_content ::= (VALUE_STRING | CRLF | VALUE_STRING_ESCAPED_QUOTE)*

value_string_single_line ::= VALUE_STRING_QUOTE (VALUE_STRING | VALUE_STRING_ESCAPED_QUOTE)* VALUE_STRING_QUOTE {pin=1}
expression ::= EXPRESSION_KEYWORD EEL_LEFT_BRACE conditional_expression EEL_RIGHT_BRACE {pin=1}

offset_access ::= EEL_LEFT_BRACKET conditional_expression EEL_RIGHT_BRACKET {pin=1}
method_call ::= method_name EEL_LEFT_PAREN [conditional_expression] (VALUE_SEPARATOR conditional_expression) * EEL_RIGHT_PAREN {pin=2}

object_path ::= (composite_identifier|method_call) (EEL_DOT (method_call|composite_identifier) | offset_access) *
composite_identifier ::= identifier (EEL_DOT (identifier)) * {
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionReferenceElement" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionCompositeIdentifierImplMixin"
}

identifier ::= EEL_IDENTIFIER
method_name ::= EEL_FUNCTION {
    implements = [ "de.vette.idea.neos.lang.fusion.psi.FusionReferenceElement" ]
    mixin = "de.vette.idea.neos.lang.fusion.psi.impl.ext.FusionMethodNameImplMixin"
}

term ::= VALUE_BOOLEAN !EEL_IDENTIFIER | EEL_SUBTRACTION_OPERATOR? VALUE_NUMBER | object_path | value_string_line

simple_expression ::= arrow_function | wrapped_expression | array_literal | object_literal | term | not_expression
arrow_function ::= method_arguments EEL_ARROW conditional_expression
method_arguments ::= method_arguments_with_parens | method_arguments_without_parens
method_arguments_with_parens ::= EEL_LEFT_PAREN EEL_IDENTIFIER? (VALUE_SEPARATOR EEL_IDENTIFIER)* EEL_RIGHT_PAREN
method_arguments_without_parens ::= EEL_IDENTIFIER
wrapped_expression ::= EEL_LEFT_PAREN conditional_expression EEL_RIGHT_PAREN
not_expression ::= EEL_NEGATION_OPERATOR simple_expression
conditional_expression ::= disjunction [IF_KEYWORD conditional_expression IF_SEPARATOR conditional_expression]
disjunction ::= conjunction (EEL_BOOLEAN_OR conjunction) *
conjunction ::= comparison (EEL_BOOLEAN_AND comparison) *
comparison ::= sum_calculation [EEL_COMPARISON_OPERATOR sum_calculation]
sum_calculation ::= prod_calculation ((EEL_ADDITION_OPERATOR|EEL_SUBTRACTION_OPERATOR) prod_calculation) *
prod_calculation ::= simple_expression ((EEL_DIVISION_OPERATOR|EEL_MODULO_OPERATOR|EEL_MULTIPLICATION_OPERATOR) simple_expression) *
array_literal ::= EEL_LEFT_BRACKET [conditional_expression] (VALUE_SEPARATOR conditional_expression) * EEL_RIGHT_BRACKET
object_literal_property ::= (value_string_line|EEL_IDENTIFIER) ':' conditional_expression
object_literal ::= EEL_OBJECT_LEFT_BRACE [object_literal_property] (VALUE_SEPARATOR object_literal_property) * EEL_OBJECT_RIGHT_BRACE