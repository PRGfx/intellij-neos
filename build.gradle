/*
 *  IntelliJ IDEA plugin to support the Neos CMS.
 *  Copyright (C) 2016  Christian Vette
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id "org.jetbrains.intellij" version "0.4.8"
    id "org.jetbrains.grammarkit" version "2019.3"
}

import org.jetbrains.grammarkit.tasks.*

// See http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html
// and https://plugins.jetbrains.com/plugin/6610-php
def pluginsForIdeaVersion = [
    'LATEST-EAP-SNAPSHOT': [
        'com.jetbrains.php:193.6015.31',
        'yaml',
        'IntelliLang',

        // test dependencies
        'CSS',
        'java-i18n',
        'java',
        'properties',

        // DEV dependencies: UNCOMMENT the following lines during development
        // to install additional plugins for development
        //'PsiViewer:3.28.93'
    ],
    '2019.3.1': [
        'com.jetbrains.php:193.5662.63',
        'yaml',
        'IntelliLang',

        // test dependencies
        'CSS',
        'java',
        'java-i18n',
        'properties'
    ],
    '2019.2.4': [
        'com.jetbrains.php:192.7142.51',
        'yaml',
        'IntelliLang',

        // test dependencies
        'CSS',
        'java',
        'java-i18n',
        'properties'
    ],
    '2019.1.4': [
        'com.jetbrains.php:191.6183.95',
        'yaml',
        'IntelliLang',

        // test dependencies
        'CSS',
        'java-i18n',
        'properties'
    ]
]

apply plugin: 'idea'
idea {
    module {
        generatedSourceDirs += file('src/gen')
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    type = 'IU'
    version ideaVersion
    pluginName 'neos-intellij-plugin'
    updateSinceUntilBuild false
    instrumentCode = false
    downloadSources Boolean.valueOf(downloadIdeaSources)
    plugins = pluginsForIdeaVersion[ideaVersion]
}

patchPluginXml {
    pluginDescription = htmlFixer('src/main/resources/META-INF/description.html')
    changeNotes = htmlFixer('src/main/resources/META-INF/change-notes.html')
}

apply plugin: 'java'
version "$version"
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
sourceSets {
    main {
        java.srcDirs += 'src/gen'
    }
}

/**
 * Simple function to load HTML files and remove the surrounding `<html>` tags. This is useful for maintaining changes-notes
 * and the description of plugins in separate HTML files which makes them much more readable.
 */
static def htmlFixer(filename) {
    String fileContents = new File(filename).text
    return fileContents.replace('<html>', '').replace('</html>', '')
}

apply plugin: 'org.jetbrains.grammarkit'
grammarKit {
    jflexRelease = '1.7.0-1'
    grammarKitRelease = grammarKitVersion
}

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        showStackTraces true
    }

    beforeSuite { suite ->
        if (suite.className != null) {
            println()
            println(suite.className)
        }
    }
    afterTest { desc, result ->
        def c = '.'
        if (result.resultType == TestResult.ResultType.FAILURE) {
            c = 'X'
        } else if (result.resultType == TestResult.ResultType.SKIPPED) {
            c = 'S'
        }
        print(c)
        System.out.flush()
    }
    afterSuite { println() }
}

task generateFusionLexer(type: GenerateLexer) {
    source = 'src/main/grammars/FusionLexer.flex'
    targetDir = 'src/gen/de/vette/idea/neos/lang/fusion/lexer'
    targetClass = 'FusionLexer'
    purgeOldFiles = true
}

task generateEelLexer(type: GenerateLexer) {
    source = 'src/main/grammars/EelLexer.flex'
    targetDir = 'src/gen/de/vette/idea/neos/lang/eel/lexer'
    targetClass = 'EelLexer'
    purgeOldFiles = true
}

task generateFusionParser(type: GenerateParser) {
    source = 'src/main/grammars/FusionParser.bnf'
    targetRoot = 'src/gen'
    pathToParser = 'src/gen/de/vette/idea/neos/lang/fusion/parser/FusionParser.java'
    pathToPsiRoot = '/de/vette/idea/neos/lang/core/psi'
    purgeOldFiles = true
}

task generateAfxLexer(type: GenerateLexer) {
    source = 'src/main/grammars/AfxLexer.flex'
    targetDir = 'src/gen/de/vette/idea/neos/lang/afx/lexer'
    targetClass = 'AfxLexer'
    purgeOldFiles = true
}

task generateAfxParser(type: GenerateParser) {
    source = 'src/main/grammars/AfxParser.bnf'
    targetRoot = 'src/gen'
    pathToParser = 'src/gen/de/vette/idea/neos/lang/afx/parser/AfxParser.java'
    pathToPsiRoot = '/de/vette/idea/neos/lang/core/psi'
    purgeOldFiles = true
}

task generateEelParser(type: GenerateParser) {
    source = 'src/main/grammars/EelParser.bnf'
    targetRoot = 'src/gen'
    pathToParser = 'src/gen/de/vette/idea/neos/lang/eel/parser/EelParser.java'
    pathToPsiRoot = '/de/vette/idea/neos/lang/core/psi'
    purgeOldFiles = true
}

compileJava.dependsOn generateFusionLexer, generateEelLexer, generateAfxLexer,  generateFusionParser, generateAfxParser, generateEelParser
compileTestJava.dependsOn generateFusionLexer, generateEelLexer, generateAfxLexer, generateFusionParser, generateAfxParser, generateEelParser